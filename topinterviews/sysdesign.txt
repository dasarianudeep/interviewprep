https://leetcode.com/discuss/interview-question/742791/Front-End-Interview-Questions

1.) Rendering Approach
Server-side rendering - 
*Server rendering generates full HTML for a page on the server in response to navigation.
This avoids additional Roundtrips for data fetching and templating on the client since
it is handled before even browser gets a response.
*SSR produces a fast FP and FCP. Running page logic and rendering on server makes it possible
to avoid send lots of JS to client, which helps to achieve a fast TTI.
*SSR are by default SEO enabled
*So users are unlikely to be left waiting for CPU bound JS to process before they can use your site.
*However, Generating pages on server takes time, which can result in lower TTFB.
*React developers can use renderToString()
*Downsides  - It's not a silver bullet, it comes with compute overhead cost. Many SSR solutions dont flush early and 
loweres TTFB. renderToString() in synchronous and single-threaded.
*Can be improved via component caching, efficient memory management and memoization techniques.

Client-side Rendering - 
*CSRS means rendering page directly in the browser using JS. All logic, data fetching , templating and Routing
are handled on clearInterval rather than server.
*Client-side rendering can be difficult to get and keep fast for mobile.
*CSR allows us to have SPA supporting nav without page refresh , provides great UX.
*Fast TTFB, increased FCP and TTI. TTI >>> FCP
*Downsides - Amount of JS required tends to grow as application grows.
This can be extremely difficult with addition of new JS libs, polyfills, 3rd party code which compete for 
processing power and must be processed before page's content can be rendered.
*SEO Considerations
*Performance - User see some lag before initial page loads when JS file is large/client doesn't have processing power
*Data Fetching - Further worsens the load/interaction time.

Improving CSR - Budgeting JS, Preload critical res, Lazy loading, Agg code splitting, app shell caching
Caching the app shell with minimal HTML, CSS and JS powering a UI.

*Aggressive code-splitting and lazy-load (server only what you need, when you need)

Universal Rendering (SSR with hydration) -
Hydration is the process of using client-side JS to add application state and interactivity by attaching event handlers
to server-rendered HTML.

2.) Infinite Scrolling - 
Infinite scroll is a UX pattern where content is continuously added to the page as a user scrolls.

Infinite scrolling/feed works by fetching the next set of posts when the user has scrolled to the end of their
 current loaded feed. This results in the user seeing a loading indicator and a short delay where the user has
  to wait for the new posts to be fetched and displayed.

  2 approaches to implement - 
  Add marker to the bottom of the feed
*Add a scroll event listener (ideally debounced) to the page that checks whether the position of the marker element is within a certain threshold from the bottom of the page.
*Use Intersection Observer API to monitor when the marker element is entering or exiting another element or intersecting by a specified amount.

3.) Virtualized Lists -
List virtualization, or "windowing", is the concept of only rendering what is visible to the user.
 The number of elements that are rendered at first is a very small subset of the entire list and the
  "window" of visible content moves when the user continues to scroll. This improves both the rendering and 
  scrolling performance of the list.
  The trick here is to only render the nodes which are visible and recycle DOM nodes instead of creating new ones. 

4.) Code Splitting

5.) Loading indicators - shimmer effect Loading

6.) Preserve Scroll Feed positions

7.) Error states - failed to fetch from server, No network

8.) Rendering Images

9.) Optimistic UI updates
Optimistic update is a performance technique where the client immediately reflect the updated state after a 
user interaction that hits the server and optimistically assume that the server request succeeds

10.) Web Accessibility
*keyboard Nav - Arrange elements in the DOM to be in logical order, Correctly set the visibility of offscreen content
*Use semantic HTML elements
*Use heading to create structually outline for urs page, Use landmark tags to define major sections of your page,
bypass repetitive content with skip links
*If you're building custom interactive components, use the tabindex attribute to ensure that they're keyboard accessible.
*Label documents, alt texts for images, Label links and buttons, label form-elements
*Add captions or screen reader descriptions to a web video using <track /> tag
*U should ensure that interactive elements like buttons or links are large enough, and have enough space around them
48*48px, spaced 8px v and h
*Color Contast ratio - 4.5:1 and 3:1 for larger text
*Avoid Content Reordering - Make sure source order and visual order are same.

11.) Internationalization & Localization
    *Use the lang attribute on the <html> tag.
    *Include the locale in the URL (e.g en_US, zh_CN, etc).
    *Webpages should use <link rel="alternate" hreflang="other_locale" href="url_for_other_locale"> to tell search engines 
    that there is another page at the specified href with the same content but for another language/locale.
    *Design headings, labels and buttons not to break in case of longer strings ensre you have 30% more white space to accomodate
    *Plan for line wrap and truncation in case if it does not fit in a single line.
    *Do not concetanate translated strings
    * Proper formatting of numbers, currency and time.
    * Do not put text in images to convey information is not scalable.


12.) Bundling Optimizations
-> The idea is to compile and serve two separate JavaScript bundles: the “regular” build, the one with 
Babel-transforms and polyfills and serve them only to legacy browsers that actually need them, and 
another bundle (same functionality) that has no transforms or polyfills.
-> Tree shaking is a term commonly used within a JavaScript context to describe the removal of dead code. 
It relies on the import and export statements to detect if code modules are exported and imported for use between 
JavaScript files.
-> Use splitChunks config in webpack to code split
-> Analyze bundles - remove, replace modules  Import Cost for Visual Code

13.) SEO
    *site is on HTTPS, verify you dont have duplicate versions of your web page, Fixing any crawl errors,
    Fix broken internal and outbound links, fix HTTP Links on  HTTPS pages, mobile-friendly, SEO friendly urls,
    Add SD, Page redirect loops, Fixing orphan pages.
    *Correct title, meta and h1 tags.

14.) Icon Rendering
-------------------------------------------------------------------------------------------------------------------
Time To Interactive (TTI) is the time it takes for a page to become fully interactive after a user arrives on it.

Server-side rendering - 
*Server rendering generates full HTML for a page on the server in response to navigation.
This avoids additional Roundtrips for data fetching and templating on the client since
it is handled before even browser gets a response.

*SSR produces a fast FP and FCP. Running page logic and rendering on server makes it possible
to avoid send lots of JS to client, which helps to achieve a fast TTI.

*SSR are by default SEO enabled
*So users are unlikely to be left waiting for CPU bound JS to process before they can use your site.

*However, Generating pages on server takes time, which can result in lower TTFB.

*React developers can use renderToString()

*Downsides  - It's not a silver bullet, it comes with compute overhead cost. Many SSR solutions dont flush early and 
loweres TTFB. renderToString() in synchronous and single-threaded.

*Can be improved via component caching, efficient memory management and memoization techniques.


Client-side Rendering - 
*CSRS means rendering page directly in the browser using JS. All logic, data fetching , templating and Routing
are handled on clearInterval rather than server.

*Client-side rendering can be difficult to get and keep fast for mobile.

*CSR allows us to have SPA supporting nav without page refresh , provides great UX.

*Fast TTFB, increased FCP and TTI. TTI >>> FCP

*Downsides - Amount of JS required tends to grow as application grows.
This can be extremely difficult with addition of new JS libs, polyfills, 3rd party code which compete for 
processing power and must be processed before page's content can be rendered.
*SEO Considerations
*Performance - User see some lag before initial page loads when JS file is large/client doesn't have processing power
*Data Fetching - Further worsens the load/interaction time.

Improving CSR - Budgeting JS, Preload critical res, Lazy loading, Agg code splitting, app shell caching
Caching the app shell with minimal HTML, CSS and JS powering a UI.

*Aggressive code-splitting and lazy-load (server only what you need, when you need)

Universal Rendering (SSR with hydration) -
Hydration is the process of using client-side JS to add application state and interactivity by attaching event handlers
to server-rendered HTML.

StaticRendering -
*SR means producing a seperate HTML for each URL ahead-of-time.
SR happens at build-time and offers a fast FP,FCP  and TTI assuming amount of client-side JS is limited.


*SR manages to achieve fast TTFB since HTML doesn't have to be generated on-the-fly.
*With HTML responses generated in advance, SR can be deployed to multiple CDNs to leverage edge-caching.

*Downsides - Individual HTML files must be generated for every possible URL.
This is challenging or impossible when you cant predict URLs ahead of time or sites with large no of unique pages.

*Maintaining a large number of HTML files can be challenging.

*An SSG site needs to be built and re-deployed every time the content changes. 
The content displayed may be stale if the site has not been built + deployed after any content change. 
This makes SSG unsuitable for highly dynamic content.



--------------------------------------------------------------------- NEWSFEED---------------------------------------------------------------
Reqs - 
*Browsing friends posts, Liking , commenting and sharing Posts, Create and publishing posts.

GET /api/v1/feed

Rendering Approach - 

Interestingly, news feed applications are somewhere in-between, there's a good amount of static content but they 
also require interaction. In reality, Facebook uses a hybrid approach which gives the best of both worlds: 
a fast initial load with SSR then hydrating the page to enable interactions. 
Subsequent content (e.g. more posts added once the user reaches the end of their feed) will be rendered via CSR.

Infinite Scrolling - 

Infinite scroll is a UX pattern where content is continuously added to the page as a user scrolls.

Infinite scrolling/feed works by fetching the next set of posts when the user has scrolled to the end of their
 current loaded feed. This results in the user seeing a loading indicator and a short delay where the user has
  to wait for the new posts to be fetched and displayed.

  2 approaches to implement - 
  Add marker to the bottom of the feed
*Add a scroll event listener (ideally debounced) to the page that checks whether the position of the marker element is within a certain threshold from the bottom of the page.
*Use Intersection Observer API to monitor when the marker element is entering or exiting another element or intersecting by a specified amount.


List Virtualization - 

It is the idea of rendering only visible rows of content in a large dynamic list.
It involves mantaining a window and moving that window around your list. More performant than ID for large list of data.

Improves Browser painting as fewer DOM nodes are rendered and few layout computations are to be matchMode

Code Splitting - 

Code split on route level,Lazy load non-critical resources such as below-the-fold images and components like Modal
which are only required on user intereaction.

Loading Indicator - 

Rather than showing just Spinner, show skeleton screens or shimmer loading effects resembling the content.

Rendering Images -

Optimistic Updates - 

Optimistic update is a performance technique where the client immediately reflect the updated state after a 
user interaction that hits the server and optimistically assume that the server request succeeds

Icon Rendering - SVG, inline sVG which is scalable and crisp

a11y - 
Add role="feed" to parent Feeds HTML element, role="article" to each post ria-labelledby="<id>"  authorname
Icon only buttons have aria-label 


--------------------------------------------------------------------- AIRBNB---------------------------------------------------------------
Reqs - 
*Search Listings, View accomodation details and reserve

User demographics, Device Support, User have to sign in?

Rendering Approach - 
SSR with hydrations since performance and SEO is important and lot of client side interaction

GET /api/v1/search?size,page,guests,country,location,date,amenities
data - check_in= &check_out= 

GET /api/v1/accommodation/{accommodationId}

POST /reserve body - accomodationId, dates, address_details, payment_details

Peformance -

    *Image Optimization - carousel images
    *Code Splitting
    *Preserving Search Context - 
    *Form Optimizations - Country specific forms, autofill experience, show error messages/states, clear focus states
    *Internationalization




---------------------------------------------INSTAGRAM---------------------------------------------------------------


--------------------------------------------------URL SHORTENER----------------------------------------------------

Requirements - 
URL shortening and URL redirecting

API -
POST - /api/v1/shorten body - longUrl
GET - /api/v1/<short>

a.)Encode actual URL - base62(sha(url))
Cons - Key duplication, To avoid add some random string/timestamp and hash

b.)Generate Keys Offline - KGS

----------------------------------------------Hotel Reservation System---------------------------------------------
Pessimistic locking [6], also called pessimistic concurrency control, prevents simultaneous updates by placing a 
lock on a record as soon as one user starts to update it. Other users who attempt to update the record have to
 wait until the first user has released the lock (committed the changes).

 Optimistic Locking

 ----------------------------------------------Payment System---------------------------------------------
Func Reqs - 
*What payment options are available? CC
*Do we hadle payments ourselelves? NO - 3rd party Stripe, BrainTree
*Is application global
*Do we need both Pay-in and Pay-out flow?
*

APIs -
POST /api/v1/payments
body - {buyer_info: json, checkout_id: int, credit_card_info:json, payment_orders: [],is_payment_done: bool}
payment_order - {seller_account: string, amount: int, currency: string, payment_order_id:int, payment_order_status:string,
ledger_updated: bool, wallet_updated: bool,checkout_id: fk}

GET /api/v1/payments/:id
This endpoint returns the execution status of a single payment order based on payment_order_id.

Double-entry ledger system


To avoid handling credit card information, companies use hosted credit card pages provided by PSPs. 
For websites, it is a widget or an iframe, while for mobile applications, it may be a pre-built page 
from the payment SDK.

Retry queue - retryable errors such as transient errors
DLQ -  if a message fails repeatedly, it eventually lands in the dead letter queue. A dead letter queue is useful 
for debugging and isolating problematic messages for inspection to determine why they were not processed successfully.


--------------------------------------------------AUTOCOMPLETE---------------------------------------------------------
*Is the matching only supported at the beginning of a search query or in the middle as well
*How many autocomplete suggestions should the system return?
*How does the system know which 5 suggestions to return?
* Does the system support spell check?
*Do we allow capitalization and special characters?

Reqs: Fast reponse time, Relevant, Sorted, Scalable, HA

Data gathering service -  gathers user input queries and aggregates them in real-time.
Basic: Freq table
Deep dive - Trie A trie is a special tree that can compactly store strings
*Space-Efficient. If you're storing lots of words that start with similar patterns, tries may reduce the 
overall storage cost by storing shared prefixes once
*Efficient Prefix Queries - Tries can quickly answer queries about words with shared prefixes,

The above algorithm is straightforward. However, it is too slow because we need to traverse the entire trie to 
get top k results in the worst-case scenario
*Limit the max length of a prefix
*Cache top search queries at node
To avoid traversing the whole trie, we store top k most frequently used queries at each node. 


Scalable - 
Users may enter billions of queries per day. 
Updating the trie on every query significantly slows down the query service
Top suggestions may not change much once the trie is built. Thus, it is unnecessary to update the trie frequently.

Query Service - 

Delete
We have to remove hateful, violent, sexually explicit, or dangerous autocomplete suggestions.
 We add a filter layer (Figure 14) in front of the Trie Cache to filter out unwanted suggestions

 Scale the storage - 
 If we need two servers for storage, we can store queries starting with ‘a’ to ‘m’ on the first server, and ‘n’ to ‘z’ on the second server.
 If we need three servers, we can split queries into ‘a’ to ‘i’, ‘j’ to ‘r’ and ‘s’ to ‘z’.

